// <auto-generated />
using System;
using Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Chats.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BaseProjectId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BaseTeamId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ChatPictureId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BaseProjectId");

                    b.HasIndex("BaseTeamId");

                    b.HasIndex("ChatPictureId");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("Domain.Entities.Chats.ChatProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectProfileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeamProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ProjectProfileId");

                    b.HasIndex("TeamProfileId");

                    b.ToTable("ChatProfile");
                });

            modelBuilder.Entity("Domain.Entities.Chats.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AttachedImageId")
                        .HasColumnType("bigint");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ChatProfileId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SenderProfileId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AttachedImageId");

                    b.HasIndex("ChatId");

                    b.HasIndex("ChatProfileId");

                    b.HasIndex("SenderProfileId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Edit team preferences"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Delete team"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Add new user to the team"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Kick user from the team"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Assign role to user"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Create, delete and set up role"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Create project for team"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Add team to other teams projects"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Leave other team project with the whole team"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Delete project created by team"
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Edit project preferences"
                        },
                        new
                        {
                            Id = 12L,
                            Name = "Add new teams to the project"
                        },
                        new
                        {
                            Id = 13L,
                            Name = "Kick team from the project"
                        },
                        new
                        {
                            Id = 14L,
                            Name = "Set role that restricts third party teams permissions"
                        },
                        new
                        {
                            Id = 15L,
                            Name = "Create new tasks"
                        },
                        new
                        {
                            Id = 16L,
                            Name = "Assign user to complete the task"
                        },
                        new
                        {
                            Id = 17L,
                            Name = "Create subtasks for existing tasks"
                        },
                        new
                        {
                            Id = 18L,
                            Name = "Change task state, description, start date and deadline"
                        },
                        new
                        {
                            Id = 19L,
                            Name = "Delete task with all subtasks"
                        },
                        new
                        {
                            Id = 20L,
                            Name = "Change chat name and picture"
                        },
                        new
                        {
                            Id = 21L,
                            Name = "Delete chat"
                        },
                        new
                        {
                            Id = 22L,
                            Name = "Add user from base team or project to the chat"
                        },
                        new
                        {
                            Id = 23L,
                            Name = "Send image to the chat"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Picture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManager.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreatorTeamId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("LimitRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("PictureId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("UseOwnHierarchy")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreatorTeamId");

                    b.HasIndex("LimitRoleId");

                    b.HasIndex("PictureId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManager.ProjectProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TeamProfileId");

                    b.ToTable("ProjectProfile");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManager.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssigneeProfileId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("ParentTaskId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeProfileId");

                    b.HasIndex("ParentTaskId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Team creator"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Teams.JoinTeamRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("RequestSenderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserToAddId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RequestSenderId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserToAddId");

                    b.ToTable("JoinTeamRequest");
                });

            modelBuilder.Entity("Domain.Entities.Teams.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatorUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("PictureId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("PictureId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Domain.Entities.Teams.TeamProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 1L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 2L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 3L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 4L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 5L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 6L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 7L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 8L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 9L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 10L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 11L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 12L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 13L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 14L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 15L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 16L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 17L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 18L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 19L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 20L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 21L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 22L
                        },
                        new
                        {
                            RoleId = 1L,
                            PermissionId = 23L
                        });
                });

            modelBuilder.Entity("RoleTeam", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("RoleTeam");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<long?>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("ImageId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Domain.Entities.Chats.Chat", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManager.Project", "BaseProject")
                        .WithMany()
                        .HasForeignKey("BaseProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Teams.Team", "BaseTeam")
                        .WithMany()
                        .HasForeignKey("BaseTeamId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Picture", "ChatPicture")
                        .WithMany()
                        .HasForeignKey("ChatPictureId");

                    b.Navigation("BaseProject");

                    b.Navigation("BaseTeam");

                    b.Navigation("ChatPicture");
                });

            modelBuilder.Entity("Domain.Entities.Chats.ChatProfile", b =>
                {
                    b.HasOne("Domain.Entities.Chats.Chat", "Chat")
                        .WithMany("Profiles")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProjectManager.ProjectProfile", "ProjectProfile")
                        .WithMany("ChatProfiles")
                        .HasForeignKey("ProjectProfileId");

                    b.HasOne("Domain.Entities.Teams.TeamProfile", "TeamProfile")
                        .WithMany("ChatProfiles")
                        .HasForeignKey("TeamProfileId");

                    b.Navigation("Chat");

                    b.Navigation("ProjectProfile");

                    b.Navigation("TeamProfile");
                });

            modelBuilder.Entity("Domain.Entities.Chats.Message", b =>
                {
                    b.HasOne("Domain.Entities.Picture", "AttachedImage")
                        .WithMany()
                        .HasForeignKey("AttachedImageId");

                    b.HasOne("Domain.Entities.Chats.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Chats.ChatProfile", null)
                        .WithMany("Messages")
                        .HasForeignKey("ChatProfileId");

                    b.HasOne("Domain.Entities.Chats.ChatProfile", "SenderProfile")
                        .WithMany()
                        .HasForeignKey("SenderProfileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AttachedImage");

                    b.Navigation("Chat");

                    b.Navigation("SenderProfile");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManager.Project", b =>
                {
                    b.HasOne("Domain.Entities.Teams.Team", "CreatorTeam")
                        .WithMany()
                        .HasForeignKey("CreatorTeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", "LimitRole")
                        .WithMany()
                        .HasForeignKey("LimitRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.Navigation("CreatorTeam");

                    b.Navigation("LimitRole");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManager.ProjectProfile", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManager.Project", "Project")
                        .WithMany("Profiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Teams.TeamProfile", "TeamProfile")
                        .WithMany("ProjectProfiles")
                        .HasForeignKey("TeamProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("TeamProfile");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManager.Task", b =>
                {
                    b.HasOne("Domain.Entities.ProjectManager.ProjectProfile", "AssigneeProfile")
                        .WithMany("Tasks")
                        .HasForeignKey("AssigneeProfileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.ProjectManager.Task", "ParentTask")
                        .WithMany("Subtasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.ProjectManager.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AssigneeProfile");

                    b.Navigation("ParentTask");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Domain.Entities.Teams.JoinTeamRequest", b =>
                {
                    b.HasOne("Domain.Entities.User", "RequestSender")
                        .WithMany("JoinTeamRequests")
                        .HasForeignKey("RequestSenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Teams.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "UserToAdd")
                        .WithMany()
                        .HasForeignKey("UserToAddId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RequestSender");

                    b.Navigation("Team");

                    b.Navigation("UserToAdd");
                });

            modelBuilder.Entity("Domain.Entities.Teams.Team", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatorUser")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Picture", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.Navigation("CreatorUser");

                    b.Navigation("Picture");
                });

            modelBuilder.Entity("Domain.Entities.Teams.TeamProfile", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Teams.Team", "Team")
                        .WithMany("Profiles")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("TeamProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleTeam", b =>
                {
                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Teams.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Picture", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Domain.Entities.Chats.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Domain.Entities.Chats.ChatProfile", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManager.Project", b =>
                {
                    b.Navigation("Profiles");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManager.ProjectProfile", b =>
                {
                    b.Navigation("ChatProfiles");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Domain.Entities.ProjectManager.Task", b =>
                {
                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("Domain.Entities.Teams.Team", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Domain.Entities.Teams.TeamProfile", b =>
                {
                    b.Navigation("ChatProfiles");

                    b.Navigation("ProjectProfiles");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("JoinTeamRequests");

                    b.Navigation("TeamProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
